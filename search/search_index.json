{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to crimpy","text":"<p>A python package for interactive mapping and visualizing areas of interest.</p> <ul> <li>GitHub Repo: https://github.com/statenandrea33/crimpy</li> <li>Documentation: https://statenandrea33.github.io/crimpy</li> <li>PyPI: https://pypi.org/project/crimpy/</li> <li>Crimpy Tutorial: https://youtu.be/N0C-qPS9YQw</li> <li>Free software: MIT license</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Crimpy is a Python package for interactive mapping and visualizing areas of interest. Crimpy is built upon several open-source packages, including: folium, ipyleaflet, ipywidgets, and geopandas. This package was built with rock climbers in mind. Crimpy can be used to visualize potential climbs you are wanting/planning on completing. You can do so by getting coordinates of the climbs you are wanting to do and compiling them into a list. There is another option for getting the coordinates and this is by using Mountain Project. On Mountain Project you can select specific climbs/routes at your desired location and then export those you have selected as a CSV file which can be uploaded and visualized using Crimpy. </p>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v004-april-12-2023","title":"v0.0.4 - April 12, 2023","text":"<ul> <li>Added functions, modules, and documentation</li> </ul>"},{"location":"changelog/#v002-april-4-2023","title":"v0.0.2 - April 4, 2023","text":"<ul> <li>Added functions and documentation</li> </ul>"},{"location":"changelog/#v001-feb-24-2023","title":"v0.0.1 - Feb 24, 2023","text":"<ul> <li>Initial release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/statenandrea33/crimpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>crimpy could always use more documentation, whether as part of the official crimpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/statenandrea33/crimpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up crimpy for local development.</p> <ol> <li> <p>Fork the crimpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/crimpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv crimpy\n$ cd crimpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 crimpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/statenandrea33/crimpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"crimpy/","title":"crimpy module","text":"<p>Main module.</p>"},{"location":"crimpy/#crimpy.crimpy.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>crimpy/crimpy.py</code> <pre><code>class Map(ipyleaflet.Map):\n# Init Function\n    def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n        \"\"\"Adds the ability to use a mouse to zoom in and out.\n\n        Args:\n            **kwargs: Keyword arguments passed to the scroll wheel zoom.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n# Add Search Control Function\n    def add_search_control(self, position=\"topleft\", **kwargs):\n        \"\"\"Add a search control to the map.\n\n        Args:\n            **kwargs: Keyword arguments passed to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n# Add Draw Control Function\n    def add_draw_control(self, **kwargs):\n        \"\"\"Add a draw control to the map.\n\n        Args:\n            **kwargs: Keyword arguments passed to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n        self.add_control(draw_control)\n\n# Add Layers Control Function\n    def add_layers_control(self, position='topright'):\n        \"\"\"Add a layers control to the map.\n\n        Args:\n            **kwargs: Keyword arguments passed to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n# Add Fullscreen Control Function\n    def add_fullscreen_control(self, position='topleft'):\n        \"\"\"Add a fullscreen control to the map.\n\n        Args:\n            **kwargs: Keyword arguments passed to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n# Add Tile Layer Function\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n# Basemap Function\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"{basemap} is not a valid basemap.\")\n\n# Add GeoJSON Function          \n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n        \"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            name (str, optional): The name of the GeoJSON layer. Defaults to 'GeoJSON'.\n        \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(geojson)\n\n# Add Shapefile Function\n    def add_shp(self, data, name='Shapefile', **kwargs):\n        \"\"\"Add a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n            name (str, optional): The name of the Shapefile layer. Defaults to 'Shapefile'.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.to_json()\n        self.add_geojson(geojson, name=name, **kwargs)\n\n# Add a Vector Function\n    def add_vector(self, data, name='Vector', **kwargs):\n        \"\"\"Add a Vector layer to the map.\n\n        Args:\n            data (str): The path to the Vector file.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.to_json()\n        self.add_geojson(geojson, name=name, **kwargs)\n\n# Add a Raster Function\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n        \"\"\"Add a raster layer to the map.\n\n        Args:\n            url (str): The URL of the raster layer.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n            \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n# Add an Image Function\n    def add_image(self, url, width, height, position = 'bottomleft'):\n        \"\"\"Add an image to the map.\n\n        Args:\n            url (str): The URL of the image.\n            width (int): The width of the image.\n            height (int): The height of the image.\n        \"\"\"\n        from ipyleaflet import WidgetControl\n        import ipywidgets as widgets\n\n        widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width=\"{width}\" height=\"{height}\"&gt;')\n        control = WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n# Add a Toolbar Function\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar with a dropdown menu to change the basemap.\n        Args:\n            self: The map.\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n        import ipywidgets as widgets\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button, close_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n                basemap.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        basemap = widgets.Dropdown(\n            options=['OpenStreetMap', 'ROADMAP', 'SATELLITE'],\n            value=None,\n            description='Basemap:',\n            style={'description_width': 'initial'},\n            layout=widgets.Layout(width='250px')\n        )\n\n        basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n\n        def change_basemap(change):\n            if change['new']:\n                self.add_basemap(basemap.value)\n\n        basemap.observe(change_basemap, names='value')\n\n        output = widgets.Output()\n        output_ctrl = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n        self.add_control(output_ctrl)\n\n        def tool_click(b):\n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button.\")\n                if b.icon == 'map':\n                    if basemap_ctrl not in self.controls:\n                        self.add_control(basemap_ctrl)\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n\n\n# Add Locations to Map Function via Coordinates\n    def add_locations_to_map(self, locations):\n        \"\"\"Takes coordinates from a list called locations and creates points on a map.\n\n        Args:\n            self : The map to add the locations to.\n            locations : A list of locations containing name, latitude, and longitude data. \n        \"\"\"\n\n        # Create a marker cluster layer to group nearby markers\n        marker_cluster = ipyleaflet.MarkerCluster()\n\n        # Loop through the list of locations and add a marker for each one\n        for location in locations:\n            # Extract the latitude and longitude from the list\n            lat, lon = location['latitude'], location['longitude']\n\n            # Create a new marker at the location and add it to the layer\n            marker = ipyleaflet.Marker(location=(lat,lon))\n            self.add_layer(marker)\n\n        # Add the marker cluster to the map\n        self.add_layer(marker_cluster)\n\n        # Find the Center of the markers\n        lats = [location['latitude'] for location in locations]\n        lons = [location['longitude'] for location in locations]\n        center_lat = sum(lats) / len(lats)\n        center_lon = sum(lons) / len(lons)\n\n        # Set the center\n        self.center = (center_lat, center_lon)\n\n# Add Locations to Map Function via CSV File\n    import pandas as pd\n\n    def plot_location_on_map(self, csv_file):\n        \"\"\"Takes a CSV file and plots the locations on a map.\n\n        Args:\n            csv_file (str): The path to the CSV file.\n        \"\"\"\n\n\n        locations = []\n\n        with open(csv_file, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            next(reader)  # skip header row\n            for row in reader:\n                location = {\n                    'name': row[1],\n                    'latitude': float(row[9]),\n                    'longitude': float(row[10])\n                }\n                locations.append(location)\n        self.add_locations_to_map(locations)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Adds the ability to use a mouse to zoom in and out.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the scroll wheel zoom.</p> <code>{}</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n    \"\"\"Adds the ability to use a mouse to zoom in and out.\n\n    Args:\n        **kwargs: Keyword arguments passed to the scroll wheel zoom.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n\n    if \"layers_control\" not in kwargs:\n        kwargs[\"layers_control\"] = True\n\n    if kwargs[\"layers_control\"]:\n        self.add_layers_control()\n\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = True\n\n    if kwargs[\"fullscreen_control\"]:\n        self.add_fullscreen_control()\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Add a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the draw control.</p> <code>{}</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_draw_control(self, **kwargs):\n    \"\"\"Add a draw control to the map.\n\n    Args:\n        **kwargs: Keyword arguments passed to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n    self.add_control(draw_control)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Add a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the fullscreen control.</p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_fullscreen_control(self, position='topleft'):\n    \"\"\"Add a fullscreen control to the map.\n\n    Args:\n        **kwargs: Keyword arguments passed to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>name</code> <code>str</code> <p>The name of the GeoJSON layer. Defaults to 'GeoJSON'.</p> <code>'GeoJSON'</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n    \"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        name (str, optional): The name of the GeoJSON layer. Defaults to 'GeoJSON'.\n    \"\"\"\n\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_image","title":"<code>add_image(self, url, width, height, position='bottomleft')</code>","text":"<p>Add an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>width</code> <code>int</code> <p>The width of the image.</p> required <code>height</code> <code>int</code> <p>The height of the image.</p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_image(self, url, width, height, position = 'bottomleft'):\n    \"\"\"Add an image to the map.\n\n    Args:\n        url (str): The URL of the image.\n        width (int): The width of the image.\n        height (int): The height of the image.\n    \"\"\"\n    from ipyleaflet import WidgetControl\n    import ipywidgets as widgets\n\n    widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width=\"{width}\" height=\"{height}\"&gt;')\n    control = WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Add a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the layers control.</p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_layers_control(self, position='topright'):\n    \"\"\"Add a layers control to the map.\n\n    Args:\n        **kwargs: Keyword arguments passed to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_locations_to_map","title":"<code>add_locations_to_map(self, locations)</code>","text":"<p>Takes coordinates from a list called locations and creates points on a map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map to add the locations to.</p> required <code>locations</code> <p>A list of locations containing name, latitude, and longitude data. </p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_locations_to_map(self, locations):\n    \"\"\"Takes coordinates from a list called locations and creates points on a map.\n\n    Args:\n        self : The map to add the locations to.\n        locations : A list of locations containing name, latitude, and longitude data. \n    \"\"\"\n\n    # Create a marker cluster layer to group nearby markers\n    marker_cluster = ipyleaflet.MarkerCluster()\n\n    # Loop through the list of locations and add a marker for each one\n    for location in locations:\n        # Extract the latitude and longitude from the list\n        lat, lon = location['latitude'], location['longitude']\n\n        # Create a new marker at the location and add it to the layer\n        marker = ipyleaflet.Marker(location=(lat,lon))\n        self.add_layer(marker)\n\n    # Add the marker cluster to the map\n    self.add_layer(marker_cluster)\n\n    # Find the Center of the markers\n    lats = [location['latitude'] for location in locations]\n    lons = [location['longitude'] for location in locations]\n    center_lat = sum(lats) / len(lats)\n    center_lon = sum(lons) / len(lons)\n\n    # Set the center\n    self.center = (center_lat, center_lon)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n    \"\"\"Add a raster layer to the map.\n\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n        \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the search control.</p> <code>{}</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n    \"\"\"Add a search control to the map.\n\n    Args:\n        **kwargs: Keyword arguments passed to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Add a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the Shapefile layer. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n    \"\"\"Add a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n        name (str, optional): The name of the Shapefile layer. Defaults to 'Shapefile'.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.to_json()\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar with a dropdown menu to change the basemap.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar with a dropdown menu to change the basemap.\n    Args:\n        self: The map.\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n    import ipywidgets as widgets\n\n    widget_width = \"250px\"\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.HBox([toolbar_button, close_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n            basemap.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n    icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                        layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    basemap = widgets.Dropdown(\n        options=['OpenStreetMap', 'ROADMAP', 'SATELLITE'],\n        value=None,\n        description='Basemap:',\n        style={'description_width': 'initial'},\n        layout=widgets.Layout(width='250px')\n    )\n\n    basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n\n    def change_basemap(change):\n        if change['new']:\n            self.add_basemap(basemap.value)\n\n    basemap.observe(change_basemap, names='value')\n\n    output = widgets.Output()\n    output_ctrl = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n    self.add_control(output_ctrl)\n\n    def tool_click(b):\n        with output:\n            output.clear_output()\n            print(f\"You clicked the {b.icon} button.\")\n            if b.icon == 'map':\n                if basemap_ctrl not in self.controls:\n                    self.add_control(basemap_ctrl)\n\n    for i in range(rows):\n        for j in range(cols):\n            tool = grid[i, j]\n            tool.on_click(tool_click)\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n\n    toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n    self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.add_vector","title":"<code>add_vector(self, data, name='Vector', **kwargs)</code>","text":"<p>Add a Vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Vector file.</p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def add_vector(self, data, name='Vector', **kwargs):\n    \"\"\"Add a Vector layer to the map.\n\n    Args:\n        data (str): The path to the Vector file.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.to_json()\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"crimpy/#crimpy.crimpy.Map.plot_location_on_map","title":"<code>plot_location_on_map(self, csv_file)</code>","text":"<p>Takes a CSV file and plots the locations on a map.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required Source code in <code>crimpy/crimpy.py</code> <pre><code>def plot_location_on_map(self, csv_file):\n    \"\"\"Takes a CSV file and plots the locations on a map.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n    \"\"\"\n\n\n    locations = []\n\n    with open(csv_file, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)  # skip header row\n        for row in reader:\n            location = {\n                'name': row[1],\n                'latitude': float(row[9]),\n                'longitude': float(row[10])\n            }\n            locations.append(location)\n    self.add_locations_to_map(locations)\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"folium/","title":"folium module","text":"<p>Folium module.</p>"},{"location":"folium/#crimpy.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>The folium map object.</p> required Source code in <code>crimpy/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"Create a folium map object.\n\n    Args:\n        folium (_type_): The folium map object.\n    \"\"\"\n# Init Function    \n    def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n        \"\"\"Initializes the map object.\n\n        Agrs:\n            center (list, optional): The center of the map. Defaults to [20,0].\n            zoom (int, optional): The zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n# Add Tile Layer Function\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url, \n            name=name, \n            attr=attribution, \n            **kwargs\n        )\n        self.add_child(tile_layer)\n\n# Add GeoJSON Function\n    def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n        \"\"\"Add a geojson file to the map (folium version).\n\n        Args:\n            data (str): A name of the geojson file.\n            name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n        \"\"\"     \n        geojson_layer = folium.GeoJson(\n            data,\n            name=name,\n            **kwargs\n        )\n        self.add_child(geojson_layer)\n\n# Add a Shapefile Function\n    def add_shp(self, data, name='Shapefile', **kwargs):\n        \"\"\"Add a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n            name (str, optional): The name of the Shapefile layer. Defaults to 'Shapefile'.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        minx, miny, maxx, maxy = gdf.total_bounds\n        self.location = [(miny + maxy) / 2, (minx + maxx) / 2]\n        self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"folium/#crimpy.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map object.</p> <p>!!! agrs     center (list, optional): The center of the map. Defaults to [20,0].     zoom (int, optional): The zoom level of the map. Defaults to 2.</p> Source code in <code>crimpy/foliumap.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n    \"\"\"Initializes the map object.\n\n    Agrs:\n        center (list, optional): The center of the map. Defaults to [20,0].\n        zoom (int, optional): The zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"folium/#crimpy.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a geojson file to the map (folium version).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A name of the geojson file.</p> required <code>name</code> <code>str</code> <p>A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.</p> <code>'GeoJSON'</code> Source code in <code>crimpy/foliumap.py</code> <pre><code>def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n    \"\"\"Add a geojson file to the map (folium version).\n\n    Args:\n        data (str): A name of the geojson file.\n        name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n    \"\"\"     \n    geojson_layer = folium.GeoJson(\n        data,\n        name=name,\n        **kwargs\n    )\n    self.add_child(geojson_layer)\n</code></pre>"},{"location":"folium/#crimpy.foliumap.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Add a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the Shapefile layer. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> Source code in <code>crimpy/foliumap.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n    \"\"\"Add a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n        name (str, optional): The name of the Shapefile layer. Defaults to 'Shapefile'.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    minx, miny, maxx, maxy = gdf.total_bounds\n    self.location = [(miny + maxy) / 2, (minx + maxx) / 2]\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"folium/#crimpy.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>crimpy/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url, \n        name=name, \n        attr=attribution, \n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>To install crimpy, run this command in your terminal:</p> <pre><code>pip install crimpy\n</code></pre> <p>This is the preferred method to install crimpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for crimpy can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/statenandrea33/crimpy\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use crimpy in a project:</p> <pre><code>import crimpy\n</code></pre>"},{"location":"examples/add_toolbar/","title":"Add toolbar","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[2]: Copied! <pre>m = crimpy.Map()\nm\n</pre> m = crimpy.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar()"},{"location":"examples/finalexam/","title":"Finalexam","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[6]: Copied! <pre>m = crimpy.Map()\nm.add_points_from_csv('data/world_cities.csv', 3, 4)\nm\n</pre> m = crimpy.Map() m.add_points_from_csv('data/world_cities.csv', 3, 4) m <pre>Unexpected exception formatting exception. Falling back to standard exception\n</pre> <pre>Traceback (most recent call last):\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3442, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"C:\\Users\\state\\AppData\\Local\\Temp\\ipykernel_17168\\3657509120.py\", line 2, in &lt;module&gt;\n    m.add_points_from_csv('data/world_cities.csv', 3, 4)\n  File \"c:\\users\\state\\onedrive\\documents\\crimpy\\crimpy\\crimpy.py\", line 424, in add_points_from_csv\nTypeError: can only concatenate tuple (not \"Marker\") to tuple\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2057, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1118, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1012, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 865, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 818, in format_exception_as_a_whole\n    frames.append(self.format_record(r))\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 736, in format_record\n    result += ''.join(_format_traceback_lines(frame_info.lines, Colors, self.has_colors, lvals))\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\core.py\", line 734, in lines\n    pieces = self.included_pieces\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\core.py\", line 681, in included_pieces\n    pos = scope_pieces.index(self.executing_piece)\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\stack_data\\core.py\", line 660, in executing_piece\n    return only(\n  File \"c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\executing\\executing.py\", line 190, in only\n    raise NotOneValueFound('Expected one value, found 0')\nexecuting.executing.NotOneValueFound: Expected one value, found 0\n</pre> In\u00a0[9]: Copied! <pre>m = crimpy.Map()\nm.csv_to_shp('data/world_cities.csv','data/world_cities.shp')\nm\n</pre> m = crimpy.Map() m.csv_to_shp('data/world_cities.csv','data/world_cities.shp') m <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[9], line 2\n      1 m = crimpy.Map()\n----&gt; 2 m.csv_to_shp('data/world_cities.csv','data/world_cities.shp')\n      3 m\n\nTypeError: csv_to_shp() takes 2 positional arguments but 3 were given</pre> In\u00a0[10]: Copied! <pre>m = crimpy.Map()\nm.create_marker_cluster()\nm\n</pre> m = crimpy.Map() m.create_marker_cluster() m <pre>\n---------------------------------------------------------------------------\nInvalidPathError                          Traceback (most recent call last)\nCell In[10], line 2\n      1 m = crimpy.Map()\n----&gt; 2 m.create_marker_cluster()\n      3 m\n\nFile c:\\users\\state\\onedrive\\documents\\crimpy\\crimpy\\crimpy.py:435, in create_marker_cluster(self)\n    433 file_selector.title = 'Select CSV File'\n    434 file_selector.default_path = '~/'\n--&gt; 435 file_selector.filter_pattern = '*.csv'\n    437 # Display the file selection widget\n    438 display(file_selector)\n\nFile c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\ipyfilechooser\\filechooser.py:497, in FileChooser.default_path(self, path)\n    494 if self._sandbox_path and not has_parent_path(normalize_path(path), self._sandbox_path):\n    495     raise ParentPathError(path, self._sandbox_path)\n--&gt; 497 self._default_path = normalize_path(path)\n    498 self._set_form_values(self._default_path, self._filename.value)\n\nFile c:\\Users\\state\\miniconda3\\envs\\geos\\lib\\site-packages\\ipyfilechooser\\utils.py:137, in normalize_path(path)\n    134 normalized_path = os.path.realpath(path)\n    136 if not os.path.isdir(normalized_path):\n--&gt; 137     raise InvalidPathError(path)\n    139 return normalized_path\n\nInvalidPathError: ~/` does not exist</pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[10]: Copied! <pre>import crimpy.foliumap as crimpy\n</pre> import crimpy.foliumap as crimpy In\u00a0[11]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n</pre> url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' In\u00a0[13]: Copied! <pre>m = crimpy.Map(zoom=10)\nm.add_geojson('data/sample.geojson')\nm.add_shp('data/TNCounties.shp')\nm\n</pre> m = crimpy.Map(zoom=10) m.add_geojson('data/sample.geojson') m.add_shp('data/TNCounties.shp') m Out[13]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/images/","title":"Images","text":"In\u00a0[2]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[3]: Copied! <pre>m = crimpy.Map()\nm\n</pre> m = crimpy.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[4]: Copied! <pre>url = 'https://www.nps.gov/obed/planyourvisit/images/IMG_0400-447.jpg?maxwidth=1300&amp;maxheight=1300&amp;autorotate=false'\n</pre> url = 'https://www.nps.gov/obed/planyourvisit/images/IMG_0400-447.jpg?maxwidth=1300&amp;maxheight=1300&amp;autorotate=false' In\u00a0[6]: Copied! <pre>m.add_image(url, 350, 200)\n</pre> m.add_image(url, 350, 200)"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[2]: Copied! <pre>m = crimpy.Map()\nm\n</pre> m = crimpy.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_geojson('data/sample.geojson', name='Countries')\n</pre> m.add_geojson('data/sample.geojson', name='Countries') In\u00a0[4]: Copied! <pre>m.add_basemap('Esri.WorldImagery')\n</pre> m.add_basemap('Esri.WorldImagery') In\u00a0[5]: Copied! <pre>m.add_basemap(\"satellite\")\n</pre> m.add_basemap(\"satellite\") In\u00a0[6]: Copied! <pre>m.add_basemap(\"roadmap\")\n</pre> m.add_basemap(\"roadmap\")"},{"location":"examples/key_features/","title":"Key features","text":"In\u00a0[1]: Copied! <pre># Key Features/ Functionality\n</pre> # Key Features/ Functionality"},{"location":"examples/locations_list/","title":"Locations list","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[2]: Copied! <pre>locations = [\n    {\n        'name': 'Location 1',\n        'latitude': 38.9072,\n        'longitude': -77.0369\n    },\n    {\n        'name': 'Location 2',\n        'latitude': 38.9784,\n        'longitude': -76.4922\n    },\n    {\n        'name': 'Location 3',\n        'latitude': 39.2904,\n        'longitude': -76.6122\n    },\n    {\n        'name': 'Location 4',\n        'latitude': 39.0997,\n        'longitude': -94.5786\n    },\n    {\n        'name': 'Location 5',\n        'latitude': 35.2271,\n        'longitude': -80.8431\n    }\n]\n</pre> locations = [     {         'name': 'Location 1',         'latitude': 38.9072,         'longitude': -77.0369     },     {         'name': 'Location 2',         'latitude': 38.9784,         'longitude': -76.4922     },     {         'name': 'Location 3',         'latitude': 39.2904,         'longitude': -76.6122     },     {         'name': 'Location 4',         'latitude': 39.0997,         'longitude': -94.5786     },     {         'name': 'Location 5',         'latitude': 35.2271,         'longitude': -80.8431     } ]  In\u00a0[3]: Copied! <pre>m = crimpy.Map(zoom=5)\nm.add_draw_control()\nm.add_search_control()\nm.add_locations_to_map(locations)\nm.add_toolbar()\nm\n</pre> m = crimpy.Map(zoom=5) m.add_draw_control() m.add_search_control() m.add_locations_to_map(locations) m.add_toolbar() m <pre>Map(center=[38.300560000000004, -81.1126], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in\u2026</pre>"},{"location":"examples/raster_data/","title":"Raster data","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[2]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[3]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[4]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider <pre>FloatSlider(value=0.0, description='Threshold:', max=1.0, min=-1.0, step=0.05)</pre> In\u00a0[5]: Copied! <pre>control = WidgetControl(widget=float_slider, position='bottomleft')\n</pre> control = WidgetControl(widget=float_slider, position='bottomleft') In\u00a0[6]: Copied! <pre>m = crimpy.Map()\nm.add_raster(url)\nm.add(control)\nm\n</pre> m = crimpy.Map() m.add_raster(url) m.add(control) m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[7]: Copied! <pre>widgets.jsdlink((float_slider, 'value'), (m.layers[-1], 'opacity'))\n</pre> widgets.jsdlink((float_slider, 'value'), (m.layers[-1], 'opacity')) <pre>DirectionalLink(source=(FloatSlider(value=0.0, description='Threshold:', max=1.0, min=-1.0, step=0.05), 'value\u2026</pre>"},{"location":"examples/upload_csv/","title":"Upload csv","text":"In\u00a0[1]: Copied! <pre>import crimpy\n</pre> import crimpy In\u00a0[2]: Copied! <pre>m = crimpy.Map()\nm.plot_location_on_map('data/IjamsCrag.csv')\nm.plot_location_on_map('data/Obed-LillyBoulders.csv')\nm.add_toolbar()\nm\n</pre> m = crimpy.Map() m.plot_location_on_map('data/IjamsCrag.csv') m.plot_location_on_map('data/Obed-LillyBoulders.csv') m.add_toolbar() m  <pre>Map(center=[36.10511851239667, -84.72302809917346], controls=(ZoomControl(options=['position', 'zoom_in_text',\u2026</pre>"}]}